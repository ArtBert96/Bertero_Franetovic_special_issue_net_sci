#multiplot
jpeg(here("Output", "Fig_3.jpg"),
height = 3000, width = 4000, quality = 1000)
L<-averageLayout(Graph_cond_0,Graph_cond_3, Graph_cond_7, Graph_cond_10, layout = "spring")
lmat <- matrix(1:4, 2)
lo <- layout(lmat, width = c(1, 1))
set.seed(1)
Graph_cond_0 = qgraph(cond0$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 0", title.cex = 6,
edge.color=cond0$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_3 = qgraph(cond3$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 6,
edge.color=cond3$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_7 = qgraph(cond7$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 6,
edge.color=cond7$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_10 = qgraph(cond10$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 6,
edge.color=cond10$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
dev.off()
#multiplot
jpeg(here("Output", "Fig_3.jpg"),
height = 3000, width = 4000, quality = 1000)
L<-averageLayout(Graph_cond_0, Graph_cond_7, Graph_cond_3, Graph_cond_10, layout = "spring")
lmat <- matrix(1:4, 2)
lo <- layout(lmat, width = c(1, 1))
set.seed(1)
Graph_cond_0 = qgraph(cond0$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 0", title.cex = 6,
edge.color=cond0$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_3 = qgraph(cond3$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 6,
edge.color=cond3$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_7 = qgraph(cond7$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 6,
edge.color=cond7$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_10 = qgraph(cond10$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 6,
edge.color=cond10$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
dev.off()
#plot with 3 levels and fixed layout
Graph_cond_0 = qgraph(cond0$pairwise$wadj)
Graph_cond_3 = qgraph(cond3$pairwise$wadj)
Graph_cond_7 = qgraph(cond7$pairwise$wadj)
Graph_cond_10 = qgraph(cond10$pairwise$wadj)
#multiplot
jpeg(here("Output", "Fig_3.jpg"),
height = 3000, width = 4000, quality = 1000)
L<-averageLayout(Graph_cond_0, Graph_cond_7, Graph_cond_3, Graph_cond_10, layout = "spring")
lmat <- matrix(1:4, 2)
lo <- layout(lmat, width = c(1, 1))
set.seed(1)
Graph_cond_0 = qgraph(cond0$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 0", title.cex = 6,
edge.color=cond0$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_3 = qgraph(cond3$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 6,
edge.color=cond3$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_7 = qgraph(cond7$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 6,
edge.color=cond7$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_10 = qgraph(cond10$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 6,
edge.color=cond10$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
dev.off()
L
#plot with 3 levels and fixed layout
Graph_cond_0 = qgraph(cond0$pairwise$wadj)
Graph_cond_3 = qgraph(cond3$pairwise$wadj)
Graph_cond_7 = qgraph(cond7$pairwise$wadj)
Graph_cond_10 = qgraph(cond10$pairwise$wadj)
#multiplot
jpeg(here("Output", "Fig_3.jpg"),
height = 3000, width = 4000, quality = 1000)
L<-averageLayout(Graph_cond_0, Graph_cond_3, Graph_cond_7, Graph_cond_10, layout = "spring")
lmat <- matrix(1:4, 2)
lo <- layout(lmat, width = c(1, 1))
set.seed(1)
Graph_cond_0 = qgraph(cond0$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 0", title.cex = 6,
edge.color=cond0$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_7 = qgraph(cond7$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 6,
edge.color=cond7$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_3 = qgraph(cond3$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 6,
edge.color=cond3$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_10 = qgraph(cond10$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 6,
edge.color=cond10$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
dev.off()
#fit
CANFit <- IsingFit(issp_2019_can, gamma = 0.05)
#plot
CANGraph<-qgraph(CANFit$weiadj, layout = averageLayout(GraphMGM),
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
legend=F, theme = "Borkulo",
borders = T, vsize=7.0, esize = 15,
filetype="jpg", filename=here("Output", "Fig_4.1"))
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4)
#combined centrality tables
centrality_combined = centralityPlot(list(GGM=GraphMGM,Ising=CANGraph), include = c("Strength"),
scale = "z-scores", orderBy = "Strength") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2,2.8)) +
theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig2_4.2_combined.jpg"), centrality_combined,
height = 4)
#Simulation input
SimInput <- LinTransform(CANFit$weiadj, CANFit$thresholds) #The LinTransform function rescales the edge weights and thresholds, so that a threshold of 0 indicates that a node has no disposition to be in a given state and a positive (negative) threshold indicates that a node has the disposition to be "on" ("off")
#create objects
shortnames_1 = shortnames_22[1]
shortnames_2 = shortnames_22[2]
shortnames_3 = shortnames_22[3]
shortnames_4 = shortnames_22[4]
shortnames_5 = shortnames_22[5]
shortnames_6 = shortnames_22[6]
shortnames_7 = shortnames_22[7]
shortnames_8 = shortnames_22[8]
shortnames_9 = shortnames_22[9]
shortnames_10 = shortnames_22[10]
shortnames_11 = shortnames_22[11]
shortnames_12 = shortnames_22[12]
shortnames_13 = shortnames_22[13]
shortnames_14 = shortnames_22[14]
shortnames_15 = shortnames_22[15]
shortnames_16 = shortnames_22[16]
shortnames_17 = shortnames_22[17]
shortnames_18 = shortnames_22[18]
shortnames_19 = shortnames_22[19]
shortnames_20 = shortnames_22[20]
shortnames_21 = shortnames_22[21]
shortnames_22 = shortnames_22[22]
#samples with single nodes positive disposition
set.seed(123)
SampleNeg <- IsingSampler(3000, SimInput$graph,
rep(-.1,22),#this argument specifies the thresholds, which are all set to -.1
responses = c(-1L,1L))
Sample_1 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,0),
1,#this sets the thesholds of the first node to 1
rep(-.1,21)),#this sets the threshold of the others node to -.1
responses = c(-1L,1L))
Sample_2 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,1),#this sets the threshold of the first node to -.1
1,#this sets the thesholds of the second node to 1
rep(-.1,20)),#this sets the threshold of the others node to -.1
responses = c(-1L,1L))
Sample_3 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,2),
1,
rep(-.1,19)),
responses = c(-1L,1L))
Sample_4 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,3),
1,
rep(-.1,18)),
responses = c(-1L,1L))
Sample_5 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,4),
1,
rep(-.1,17)),
responses = c(-1L,1L))
Sample_6 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,5),
1,
rep(-.1,16)),
responses = c(-1L,1L))
Sample_7 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,6),
1,
rep(-.1,15)),
responses = c(-1L,1L))
Sample_8 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,7),
1,
rep(-.1,14)),
responses = c(-1L,1L))
Sample_9 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,8),
1,
rep(-.1,13)),
responses = c(-1L,1L))
Sample_10 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,9),
1,
rep(-.1,12)),
responses = c(-1L,1L))
Sample_11 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,10),
1,
rep(-.1,11)),
responses = c(-1L,1L))
Sample_12 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,11),
1,
rep(-.1,10)),
responses = c(-1L,1L))
Sample_13 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,12),
1,
rep(-.1,9)),
responses = c(-1L,1L))
Sample_14 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,13),
1,
rep(-.1,8)),
responses = c(-1L,1L))
Sample_15 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,14),
1,
rep(-.1,7)),
responses = c(-1L,1L))
Sample_16 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,15),
1,
rep(-.1,6)),
responses = c(-1L,1L))
Sample_17 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,16),
1,
rep(-.1,5)),
responses = c(-1L,1L))
Sample_18 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,17),
1,
rep(-.1,4)),
responses = c(-1L,1L))
Sample_19 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,18),
1,
rep(-.1,3)),
responses = c(-1L,1L))
Sample_20 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,19),
1,
rep(-.1,2)),
responses = c(-1L,1L))
Sample_21 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,20),
1,
rep(-.1,1)),
responses = c(-1L,1L))
Sample_22 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,21),
1,
rep(-.1,0)),
responses = c(-1L,1L))
allsamples <- rbind(SampleNeg,
Sample_1,
Sample_2,
Sample_3,
Sample_4,
Sample_5,
Sample_6,
Sample_7,
Sample_8,
Sample_9,
Sample_10,
Sample_11,
Sample_12,
Sample_13,
Sample_14,
Sample_15,
Sample_16,
Sample_17,
Sample_18,
Sample_19,
Sample_20,
Sample_21,
Sample_22)
rowname <- rep(c('Baseline',
glue('Intervention on {shortnames_1}'),
glue('Intervention on {shortnames_2}'),
glue('Intervention on {shortnames_3}'),
glue('Intervention on {shortnames_4}'),
glue('Intervention on {shortnames_5}'),
glue('Intervention on {shortnames_6}'),
glue('Intervention on {shortnames_7}'),
glue('Intervention on {shortnames_8}'),
glue('Intervention on {shortnames_9}'),
glue('Intervention on {shortnames_10}'),
glue('Intervention on {shortnames_11}'),
glue('Intervention on {shortnames_12}'),
glue('Intervention on {shortnames_13}'),
glue('Intervention on {shortnames_14}'),
glue('Intervention on {shortnames_15}'),
glue('Intervention on {shortnames_16}'),
glue('Intervention on {shortnames_17}'),
glue('Intervention on {shortnames_18}'),
glue('Intervention on {shortnames_19}'),
glue('Intervention on {shortnames_20}'),
glue('Intervention on {shortnames_21}'),
glue('Intervention on {shortnames_22}')),
each=3000)
row.names(allsamples) <- rowname
#calculate the sum scores of the different networks
sumSampleall<-apply(allsamples, 1, sum)
sumscores<- data.frame(sumSampleall,rowname)
head (sumscores)
meansumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), mean)
sdsumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), sd)
graphicsumscores<- data.frame(meansumscores,sdsumscores)
#calculate confidence intervals for sumscore means
m<-graphicsumscores$x
s<-graphicsumscores$x.1
u<-m+1.96*s/sqrt(3000)
l<-m-1.96*s/sqrt(3000)
confi<- cbind(graphicsumscores, m, u, l)
names<-confi$Group.1
graph<-data.frame(confi,names)
graph$names <- factor(graph$names, levels = graph$names[order(graph$m)])
graph$names
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
theme_nice()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
# theme_nice()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
# theme_nice()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4)
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
# theme_nice()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
meansumscores_plot
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
theme_minimal()+
theme(axis.text.y=element_text(hjust=1))
return(p)
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
theme_minimal()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
meansumscores_plot
