glue('Intervention on {shortnames_10}'),
glue('Intervention on {shortnames_11}'),
glue('Intervention on {shortnames_12}'),
glue('Intervention on {shortnames_13}'),
glue('Intervention on {shortnames_14}'),
glue('Intervention on {shortnames_15}'),
glue('Intervention on {shortnames_16}'),
glue('Intervention on {shortnames_17}'),
glue('Intervention on {shortnames_18}'),
glue('Intervention on {shortnames_19}'),
glue('Intervention on {shortnames_20}'),
glue('Intervention on {shortnames_21}'),
glue('Intervention on {shortnames_22}')),
each=3000)
row.names(allsamples) <- rowname
#calculate the sum scores of the different networks
sumSampleall<-apply(allsamples, 1, sum)
sumscores<- data.frame(sumSampleall,rowname)
head (sumscores)
meansumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), mean)
sdsumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), sd)
graphicsumscores<- data.frame(meansumscores,sdsumscores)
#calculate confidence intervals for sumscore means
m<-graphicsumscores$x
s<-graphicsumscores$x.1
u<-m+1.96*s/sqrt(3000)
l<-m-1.96*s/sqrt(3000)
confi<- cbind(graphicsumscores, m, u, l)
names<-confi$Group.1
graph<-data.frame(confi,names)
graph$names <- factor(graph$names, levels = graph$names[order(graph$m)])
graph$names
#descriptives
confi_des = confi %>%
arrange(m)
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
theme_minimal()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
#edge weight accuracy: non parametric bootstrap with 8 cores
#edgeacc =  bootnet(issp_2019_nodes, nBoots = 10000, nCores = 8, 'EBICglasso')
#load the object instead:
load(here("Input", "bootstrap", "ggm_boot.RData"))
#plot
edgeacc_ggm = plot(edgeacc, labels = shortnames_22, order="sample")
ggsave(here("Output", "Supplement", "Fig_2.jpg"), edgeacc_ggm, height = 22, width = 15)
#summary edgeacc
saummary_edgeacc = summary(edgeacc, statistics = c("edge"),
perNode = FALSE, rank = FALSE)
#descriptives
summary_edgeacc_order <- saummary_edgeacc %>%
arrange(mean)
summary_edgeacc_order <- saummary_edgeacc %>%
filter(node1 == "work" | node2 == "work")
#summary edgstr
saummary_edgstr = summary(edgeacc, statistics = c("strength"),
perNode = FALSE, rank = FALSE)
#descriptives
summary_edgstr_order = saummary_edgstr %>%
arrange(mean)
## Test: difference of strength of node 5 [conspiracy] vs 20 [hesitancy] (if the bootstrapped CI include 0, they do not differ)
test_strrr = differenceTest(edgeacc, 1, 3, "strength")
# case dropping bootstrap
#centstab = bootnet(issp_2019_nodes, nBoots = 10000, 'EBICglasso', type = "case", nCores = 8)
#plot
centstab_ggm = plot(centstab, "Strength", labels = shortnames_22)
ggsave(here("Output", "Supplement", "Fig_3.jpg"), centstab_ggm, height = 22, width = 15)
#CS-coefficient (result should be above 0.25, better if above 0.5)
corStability_ggm = corStability(centstab)
## Test: difference of weight ties 2-3 vs 4-5
#differenceTest(edgeacc, x = "p_inc_ineq", x2 = "b_red_pub", y = "p_inc_ineq",
#                y2 = "j_ineq", "edge")
## Plot test results for every edge weight in the network
#pdf('../Output/robustness/test_edges.pdf', height = 70, width = 50)
#plot(edgeacc, "edge", plot = "difference", onlyNonZero = TRUE, order = "sample",
#     labels = T)
#dev.off()
#
## Plot test results for every edge weight in the network
#pdf('../Output/robustness/test_strenghts.pdf', height = 70, width = 50)
#plot(edgeacc, "strength", order = "mean", labels = T)
#dev.off()
#Stability of moderations
#res_obj <- resample(object = mgm_mod,
#                    data = issp_2019_anger,
#                    nB = 500,
#                    pbar = TRUE)
#load object instead
load(here("Input", "bootstrap", "mod_boot.RData"))
#visualize result
#png(here("Output", "Supplement", "Fig_4.1.png"), width = 3000, height = 3000)  # uncomment and put table = F if you want figure rather than table
tab_mod = data.frame(plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
decreasing = TRUE,
labels = colnames(issp_2019_anger),
layout.width.labels = 1,
table = TRUE))
#plot
CANGraph<-qgraph(CANFit$weiadj, layout = averageLayout(GraphMGM),
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
legend=T,  legend.cex = 0.33, theme = "Borkulo",
borders = T, vsize=7.0, esize = 15,
filetype="jpg", filename=here("Output", "Fig_4.1"))
#plot
CANGraph<-qgraph(CANFit$weiadj, layout = averageLayout(GraphMGM),
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
legend=T,  legend.cex = 0.30, theme = "Borkulo",
borders = T, vsize=7.0, esize = 15,
filetype="jpg", filename=here("Output", "Fig_4.1"))
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr,
stargazer, IsingFit, qgraph, Matrix, igraph, NetworkComparisonTest, bootnet,
rio, IsingSampler, compute.es, foreign, mgm, matrixcalc, openxlsx, Rcpp,
forestplot, ggplot2, compute.es, jtools, glue, EGAnet, signnet)
#remove scipen
options(scipen=999)
#Import dataset
load(here("Input", "usa_data.RData"))
shortnames_22 = names(issp_2019_nodes)
shortnames_23 = names(issp_2019_anger)
longnames_22 <- c("Perception of large income inequality (ineq_p)",
"Perception of tax regressivity (reg_p)",
"Belief in progressive taxation (prog_b)",
"Judgment of unfair distribution (ineq_j)",
"Judgment of political disinterest in redistribution (redis_d)",
"Judgment of failure of public redistribution (redis_f)",
"Importance of wealthy family (family)",
"Importance of parental education (edupar)",
"Importance of education (edu)",
"Importance of hard work (work)",
"Importance of knowing right people (people)",
"Importance of political connections (connec)",
"Importance of giving bribes (bribes)",
"Importance of race (race)",
"Importance of religion (relig)",
"Importance of sex (sex)",
"Belief in public redistribution (redis_p)",
"Belief in market redistribution (redis_m)",
"Pay criteria: Responsibility (resp)",
"Pay criteria: Training (train)",
"Pay criteria: Need (need)",
"Pay criteria: Merit (merit)")
legendnames_22 <- c("Perception of large income inequality",
"Perception of tax regressivity",
"Belief in progressive taxation",
"Judgment of unfair distribution",
"Judgment of political disinterest in redistribution",
"Judgment of failure of public redistribution",
"Importance of wealthy family",
"Importance of parental education",
"Importance of education",
"Importance of hard work",
"Importance of knowing right people",
"Importance of political connections",
"Importance of giving bribes",
"Importance of race",
"Importance of religion",
"Importance of sex",
"Belief in public redistribution",
"Belief in market redistribution",
"Pay criteria: Responsibility",
"Pay criteria: Training",
"Pay criteria: Need",
"Pay criteria: Merit")
#colors
ggm_groups = list(
"Perceptions"=c(1,2,7:16),
"Beliefs"=c(3,17:22),
"Judgments"=c(4:6))
ggm_colors <- c("#FBB4AE","#CCEBC5", "#A6D9E0")
#remove haven labels
issp_2019_nodes = sapply(issp_2019_nodes, haven::zap_labels)
issp_2019_can = sapply(issp_2019_can, haven::zap_labels)
issp_2019_anger = sapply(issp_2019_anger, haven::zap_labels)
#fit mgm
mgm_issp_2019_nodes = mgm(issp_2019_nodes, type = rep("g",22),
level = rep(1, 22), lambdaSel = "EBIC", ruleReg = "OR")
#predictability
pred_obj <- predict(object = mgm_issp_2019_nodes,
data = issp_2019_nodes,
errorCon = 'R2')
#descriptives
mgm_nodes_desc = as.vector(mgm_issp_2019_nodes$pairwise$wadj)
length(mgm_nodes_desc[mgm_nodes_desc != 0])/462
pred_df = pred_obj$errors %>%
arrange(R2)
#plot
set.seed(100)
GraphMGM<-qgraph(mgm_issp_2019_nodes$pairwise$wadj, layout = 'spring',
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
legend=T, legend.cex = 0.33,
edge.color=mgm_issp_2019_nodes$pairwise$edgecolor_cb,
borders = T, vsize=7.0, esize = 15, GLratio = 2,
pie = pred_obj$errors[,2], pieColor = rep('#377EB8',22),
filetype="jpg", filename=here("Output", "Fig_1"))
# ITA_small_core = qgraph::smallworldness(CANFit$weiadj, B = 1000)
(small_w = NetworkToolbox::smallworldness(mgm_issp_2019_nodes$pairwise$wadj, iter = 1000,
progBar = FALSE, method = c("TJHBL")))
#ASPL
NetworkToolbox::pathlengths(mgm_issp_2019_nodes$pairwise$wadj, weighted = FALSE)
#Clustering
NetworkToolbox::transitivity(mgm_issp_2019_nodes$pairwise$wadj, weighted = FALSE)
#centrality
centrality_mgm_graph = centralityPlot(GraphMGM, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_2.jpg"), centrality_mgm_graph,
height = 4)
#Fit moderated ggm
mgm_mod <- mgm(data = issp_2019_anger,
type = rep("g", 23),
level = rep(1, 23),
lambdaSel = "CV",
ruleReg = "OR",
moderators = 23,
threshold = "none",
pbar = FALSE)
#Inspect interaction parameters [comments are wrong:readapt]
mgm_mod$interactions$indicator
#45 pairwise interactions
#27 3-way interactions (moderation)
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(1,22))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(1,22,23))
#redis_f redis_p = 0.025
#mod = 0.064
# if anger 0, redis_f redis_p = 0.025 + 0.064 * 0 = 0.025
# if anger 3, redis_f redis_p = 0.025 + 0.064 * 3 = 0.217
# if anger 7, redis_f redis_p = 0.025 + 0.064 * 7 = 0.473
# if anger 10, redis_f redis_p = 0.025 + 0.064 * 10 = 0.665
#family sex = 0.065
#mod = 0.041
# if anger 0, family sex= 0.065 + 0.041 * 0 = 0.065
# if anger 10,family sex = 0.065 + 0.041 * 10 = 0.475
#edu redis_m = 0.009
#mod = 0.026
# if anger 0, edu redis_m= 0.009 + 0.026 * 0 = 0.009
# if anger 10,edu redis_m = 0.009 + 0.026 * 10 = 0.269
#edupar race = 0.0
#mod = -0.030
# if anger 0, edupar race = 0.0 -0.030 * 0 = 0.0
# if anger 10,edupar race = 0.0 -0.030 * 10 = -0.300
#edu bribes = 0
#mod = -0.018
# if anger 0, edu bribes = -0.018 +0.040  * 0 = -0.018
# if anger 10,edu bribes = -0.018 -0.040  * 10 = -0.418
#family connec = 0.145
#mod = 0.032
# if anger 0, edu bribes = 0.145 + 0.032 * 0 = 0.145
# if anger 10,edu bribes = 0.145 + 0.032 * 10 = 0.465
#ineq_p merit = 0.010
#mod = 0.011
# if anger 0, ineq_p merit = 0.010+ 0.011* 0 = 0.010
# if anger 3, ineq_p merit = 0.010+ 0.011* 3 = 0.043
# if anger 7, ineq_p merit = 0.010+ 0.011* 7 = 0.087
# if anger 10,ineq_p merit  =0.010 +0.011 * 10 = 0.120
#access scale of anger (every variable is mean-centered and sd=1)
tb <- table(scale(issp_2019_anger[,23]))
names(tb) <- round(as.numeric(names(tb)), 2)
barplot(tb, axes=FALSE, xlab="", ylim=c(0, 250))
axis(2, las=2, c(0, 50, 100, 150, 200, 250))
#conditioning on the moderator, interesting values are 0, 3, 7, 10 of v 11 (anger)
cond0 <- condition(object = mgm_mod,
values = list('23' = 0))
cond3 <- condition(object = mgm_mod,
values = list('23' = 3))
cond7 <- condition(object = mgm_mod,
values = list('23' = 7))
cond10 <- condition(object = mgm_mod,
values = list('23' = 10))
#these are now 3 different pairwise models, in which anger is fixed at 3 diff values
#plot with 3 levels and fixed layout
Graph_cond_0 = qgraph(cond0$pairwise$wadj)
Graph_cond_3 = qgraph(cond3$pairwise$wadj)
Graph_cond_7 = qgraph(cond7$pairwise$wadj)
Graph_cond_10 = qgraph(cond10$pairwise$wadj)
#multiplot
jpeg(here("Output", "Fig_3.jpg"),
height = 12000, width = 12000, quality = 1000)
L<-averageLayout(Graph_cond_0, Graph_cond_3, Graph_cond_7, Graph_cond_10, layout = "spring")
lmat <- matrix(1:4, 2)
lo <- layout(lmat, width = c(1, 1))
set.seed(1)
Graph_cond_0 = qgraph(cond0$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 0", title.cex = 12,
edge.color=cond0$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_7 = qgraph(cond7$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 12,
edge.color=cond7$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_3 = qgraph(cond3$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 12,
edge.color=cond3$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_10 = qgraph(cond10$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 12,
edge.color=cond10$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
dev.off()
#descriptives of MNM: mean edge value
cond0_desc = cond0$pairwise$wadj[-23, ]
cond0_desc = cond0_desc[, -23]
cond0_desc = as.vector(cond0_desc[cond0_desc != 0])
(cond0_desc = mean(cond0_desc))
cond3_desc = cond3$pairwise$wadj[-23, ]
cond3_desc = cond3_desc[, -23]
cond3_desc = as.vector(cond3_desc[cond3_desc != 0])
(cond3_desc = mean(cond3_desc))
cond7_desc = cond7$pairwise$wadj[-23, ]
cond7_desc = cond7_desc[, -23]
cond7_desc = as.vector(cond7_desc[cond7_desc != 0])
(cond7_desc = mean(cond7_desc))
cond10_desc = cond10$pairwise$wadj[-23, ]
cond10_desc = cond10_desc[, -23]
cond10_desc = as.vector(cond10_desc[cond10_desc != 0])
(cond10_desc = mean(cond10_desc))
#signs:
cond0_desc_s = na.omit(as.vector(cond0$pairwise$signs))
(sum(cond0_desc_s == -1)/2)
(sum(cond0_desc_s == 1)/2)
cond3_desc_s = na.omit(as.vector(cond3$pairwise$signs))
(sum(cond3_desc_s == -1)/2)
(sum(cond3_desc_s == 1)/2)
cond7_desc_s = na.omit(as.vector(cond7$pairwise$signs))
(sum(cond7_desc_s == -1)/2)
(sum(cond7_desc_s == 1)/2)
cond10_desc_s = na.omit(as.vector(cond10$pairwise$signs))
(sum(cond10_desc_s == -1)/2)
(sum(cond10_desc_s == 1)/2)
#fit
#CANFit <- IsingFit(issp_2019_can, gamma = 0.05)
CANFit <- IsingFit(issp_2019_can, gamma = 0.25)
(small_w_is = NetworkToolbox::smallworldness(CANFit$weiadj, iter = 1000,
progBar = FALSE, method = c("TJHBL")))
#plot
CANGraph<-qgraph(CANFit$weiadj, layout = averageLayout(GraphMGM),
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
legend=T,  legend.cex = 0.30, theme = "Borkulo",
borders = T, vsize=7.0, esize = 15,
filetype="jpg", filename=here("Output", "Fig_4.1"))
#descriptives
can_desc = as.vector(CANFit$weiadj)
length(can_desc[can_desc != 0])/462
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4)
jpeg(here("Output", "Fig_3.jpg"),
quality = 1000)
L<-averageLayout(Graph_cond_0, Graph_cond_3, Graph_cond_7, Graph_cond_10, layout = "spring")
lmat <- matrix(1:4, 2)
lo <- layout(lmat, width = c(1, 1))
set.seed(1)
Graph_cond_0 = qgraph(cond0$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 0", title.cex = 12,
edge.color=cond0$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_7 = qgraph(cond7$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 12,
edge.color=cond7$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_3 = qgraph(cond3$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 12,
edge.color=cond3$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_10 = qgraph(cond10$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 12,
edge.color=cond10$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
dev.off()
jpeg(here("Output", "Fig_3.jpg"),
height = 12000, width = 12000, quality = 1000)
L<-averageLayout(Graph_cond_0, Graph_cond_3, Graph_cond_7, Graph_cond_10, layout = "spring")
lmat <- matrix(1:4, 2)
lo <- layout(lmat, width = c(1, 1))
set.seed(1)
Graph_cond_0 = qgraph(cond0$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 0", title.cex = 12,
edge.color=cond0$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_7 = qgraph(cond7$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 12,
edge.color=cond7$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_3 = qgraph(cond3$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 12,
edge.color=cond3$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_10 = qgraph(cond10$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 12,
edge.color=cond10$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
dev.off()
#plot
CANGraph<-qgraph(CANFit$weiadj, layout = averageLayout(GraphMGM),
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
legend=T,  legend.cex = 0.30, theme = "Borkulo",
borders = T, vsize=7.0, esize = 15, GLratio = 2,
filetype="jpg", filename=here("Output", "Fig_4.1"))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4, width = 8)
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4, width = 8)
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4, width = 12)
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4, width = 10)
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4, width = 11)
