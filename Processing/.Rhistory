responses = c(-1L,1L))
Sample_17 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,16),
1,
rep(-.1,5)),
responses = c(-1L,1L))
Sample_18 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,17),
1,
rep(-.1,4)),
responses = c(-1L,1L))
Sample_19 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,18),
1,
rep(-.1,3)),
responses = c(-1L,1L))
Sample_20 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,19),
1,
rep(-.1,2)),
responses = c(-1L,1L))
Sample_21 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,20),
1,
rep(-.1,1)),
responses = c(-1L,1L))
Sample_22 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,21),
1,
rep(-.1,0)),
responses = c(-1L,1L))
allsamples <- rbind(SampleNeg,
Sample_1,
Sample_2,
Sample_3,
Sample_4,
Sample_5,
Sample_6,
Sample_7,
Sample_8,
Sample_9,
Sample_10,
Sample_11,
Sample_12,
Sample_13,
Sample_14,
Sample_15,
Sample_16,
Sample_17,
Sample_18,
Sample_19,
Sample_20,
Sample_21,
Sample_22)
rowname <- rep(c('Baseline',
glue('Intervention on {shortnames_1}'),
glue('Intervention on {shortnames_2}'),
glue('Intervention on {shortnames_3}'),
glue('Intervention on {shortnames_4}'),
glue('Intervention on {shortnames_5}'),
glue('Intervention on {shortnames_6}'),
glue('Intervention on {shortnames_7}'),
glue('Intervention on {shortnames_8}'),
glue('Intervention on {shortnames_9}'),
glue('Intervention on {shortnames_10}'),
glue('Intervention on {shortnames_11}'),
glue('Intervention on {shortnames_12}'),
glue('Intervention on {shortnames_13}'),
glue('Intervention on {shortnames_14}'),
glue('Intervention on {shortnames_15}'),
glue('Intervention on {shortnames_16}'),
glue('Intervention on {shortnames_17}'),
glue('Intervention on {shortnames_18}'),
glue('Intervention on {shortnames_19}'),
glue('Intervention on {shortnames_20}'),
glue('Intervention on {shortnames_21}'),
glue('Intervention on {shortnames_22}')),
each=3000)
row.names(allsamples) <- rowname
#calculate the sum scores of the different networks
sumSampleall<-apply(allsamples, 1, sum)
sumscores<- data.frame(sumSampleall,rowname)
head (sumscores)
meansumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), mean)
sdsumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), sd)
graphicsumscores<- data.frame(meansumscores,sdsumscores)
#calculate confidence intervals for sumscore means
m<-graphicsumscores$x
s<-graphicsumscores$x.1
u<-m+1.96*s/sqrt(3000)
l<-m-1.96*s/sqrt(3000)
confi<- cbind(graphicsumscores, m, u, l)
names<-confi$Group.1
graph<-data.frame(confi,names)
graph$names <- factor(graph$names, levels = graph$names[order(graph$m)])
graph$names
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
theme_minimal()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
#edge weight accuracy: non parametric bootstrap with 8 cores
#edgeacc =  bootnet(issp_2019_nodes, nBoots = 10000, nCores = 8, 'EBICglasso')
#load the object instead:
load(here("Input", "bootstrap", "ggm_boot.RData"))
#plot
edgeacc_ggm = plot(edgeacc, labels = shortnames_22, order="sample")
ggsave(here("Output", "Supplement", "Fig_2.jpg"), edgeacc_ggm, height = 22, width = 15)
#summary edgeacc
saummary_edgeacc = summary(edgeacc, statistics = c("edge"),
perNode = FALSE, rank = FALSE)
#descriptives
summary_edgeacc_order <- saummary_edgeacc %>%
arrange(mean)
summary_edgeacc_order <- saummary_edgeacc %>%
filter(node1 == "need" | node2 == "need")
#summary edgstr
saummary_edgstr = summary(edgeacc, statistics = c("strength"),
perNode = FALSE, rank = FALSE)
#descriptives
summary_edgstr_order = saummary_edgstr %>%
arrange(mean)
## Test: difference of strength of node 5 [conspiracy] vs 20 [hesitancy] (if the bootstrapped CI include 0, they do not differ)
test_strrr = differenceTest(edgeacc, 1, 3, "strength")
# case dropping bootstrap
#centstab = bootnet(issp_2019_nodes, nBoots = 10000, 'EBICglasso', type = "case", nCores = 8)
#plot
centstab_ggm = plot(centstab, "Strength", labels = shortnames_22)
ggsave(here("Output", "Supplement", "Fig_3.jpg"), centstab_ggm, height = 22, width = 15)
#CS-coefficient (result should be above 0.25, better if above 0.5)
corStability_ggm = corStability(centstab)
## Test: difference of weight ties 2-3 vs 4-5
#differenceTest(edgeacc, x = "p_inc_ineq", x2 = "b_red_pub", y = "p_inc_ineq",
#                y2 = "j_ineq", "edge")
## Plot test results for every edge weight in the network
#pdf('../Output/robustness/test_edges.pdf', height = 70, width = 50)
#plot(edgeacc, "edge", plot = "difference", onlyNonZero = TRUE, order = "sample",
#     labels = T)
#dev.off()
#
## Plot test results for every edge weight in the network
#pdf('../Output/robustness/test_strenghts.pdf', height = 70, width = 50)
#plot(edgeacc, "strength", order = "mean", labels = T)
#dev.off()
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(6,17))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(6,17,23))
0.025*0.064
0.025*0.064*0
0.025+0.064*0
0.025 + 0.064 * 3
0.025 + 0.064 * 7
0.025 + 0.064 * 10
summary_edgeacc_order <- saummary_edgeacc %>%
filter(node1 == "redis_p" | node2 == "redis_f")
summary_edgeacc_order
summary_edgeacc_order <- saummary_edgeacc %>%
filter(node1 == "redis_p" & node2 == "redis_f")
summary_edgeacc_order
summary_edgeacc_order <- saummary_edgeacc %>%
filter(node1 == "redis_f" & node2 == "redis_p")
summary_edgeacc_order
shortnames_23
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(7,16))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(7,16,23))
0.025 + 0.041 * 10
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(7,16))
0.065 + 0.041 * 10
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(9,18))
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(9,18))
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(9,18))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(9,18,23))
#Stability of moderations
#res_obj <- resample(object = mgm_mod,
#                    data = issp_2019_anger,
#                    nB = 500,
#                    pbar = TRUE)
#load object instead
load(here("Input", "bootstrap", "mod_boot.RData"))
#visualize result
#png(here("Output", "Supplement", "Fig_4.1.png"), width = 3000, height = 3000)  # uncomment and put table = F if you want figure rather than table
tab_mod = data.frame(plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
decreasing = TRUE,
labels = colnames(issp_2019_anger),
layout.width.labels = 1,
table = TRUE))
#load object instead
load(here("Input", "bootstrap", "mod_boot.RData"))
tab_mod = data.frame(plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
decreasing = TRUE,
labels = colnames(issp_2019_anger),
layout.width.labels = 1,
table = TRUE))
View(tab_mod)
View(tab_mod)
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(9,18))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(9,18,23))
1*0
0.009 + 0.026 * 10
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(8,15))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(8,15,23))
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(8,14))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(8,14,23))
shortnames_23
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(8,14))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(8,14,23))
View(tab_mod)
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(8,14))
summary_edgeacc_order <- saummary_edgeacc %>%
filter(node1 == "edupar" & node2 == "race")
summary_edgeacc_order
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(8,14,23))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(8,14,23))
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(8,14))
0.009 -0.029 * 0
0.000 -0.029 * 10
shortnames_23
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(9,13))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(9,13,23))
-0.018 -0.040  * 0
-0.018 -0.040  * 10
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(7,12))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(7,12,23))
0.145 + 0.032 * 0
0.145 + 0.032 * 10
0.016 + 0.026 * 0
0.016 + 0.026 * 10
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(8,14))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(8,14,23))
0.0 -0.030 * 0
0.0 -0.030 * 10
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(7,14))
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(7,12))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(7,12,23))
0.145 + 0.032 * 0
0.145 + 0.032 * 10
shortnames_23
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(8,14))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(8,14,23))
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(8,14))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(8,14,23))
shortnames_23
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(9,13))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(9,13,23))
0.018 -0.040  * 0
-0.018 +0.040  * 0
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(9,13))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(9,13,23))
-0.018 -0.040  * 10
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(9,13))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(9,13,23))
shortnames_23
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(1,22))
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(1,22,23))
0.010+ 0.011* 0
0.010+ 0.011* 3
0.010+ 0.011* 7
0.010 +0.011 * 10
0.120/0.100
cond0$pairwise$wadj
cond0_desc = cond0$pairwise$wadj[-23, ]
cond0_desc
cond0_desc = cond0_desc[, -23]
cond0_desc
cond0_desc = as.vector(cond0_desc)
length(cond0_desc[cond0_desc != 0])/484
mgm_nodes_desc = as.vector(mgm_issp_2019_nodes$pairwise$wadj)
length(mgm_nodes_desc[mgm_nodes_desc != 0])/484
cond3_desc = cond3$pairwise$wadj[-23, ]
cond3_desc = cond3_desc[, -23]
cond3_desc = as.vector(cond3_desc)
(length(cond3_desc[cond3_desc != 0])/484)
cond7_desc = cond7$pairwise$wadj[-23, ]
cond7_desc = cond7_desc[, -23]
cond7_desc = as.vector(cond7_desc)
(length(cond7_desc[cond7_desc != 0])/484)
cond0_desc = cond0$pairwise$wadj[-23, ]
cond0_desc = cond0_desc[, -23]
cond0_desc = as.vector(cond0_desc)
(length(cond0_desc[cond0_desc != 0])/484)
#signs:
cond0$pairwise$signs
sum(cond0$pairwise$signs == -1)
#signs:
cond0$pairwise$signs
View(cond0)
cond0[["pairwise"]][["signs"]]
sum(cond0[["pairwise"]][["signs"]] == -1)
sum(na.omit(cond0$pairwise$signs) == -1)
na.omit(cond0$pairwise$signs)
cond0$pairwise$signs
cond0 <- condition(object = mgm_mod,
values = list('23' = 0))
#signs:
cond0_desc_s = na.omit(as.vector(cond0$pairwise$signs))
cond0_desc_s
cond0_desc_s
sum(cond0_desc_s == -1)
sum(cond0_desc_s == 1)
(sum(cond0_desc_s == -1)/2)
(sum(cond0_desc_s == 1)/2)
105+46
22+21/2
22*21/2
length(mgm_nodes_desc[mgm_nodes_desc != 0])
length(mgm_nodes_desc[mgm_nodes_desc != 0])/2
length(mgm_nodes_desc[mgm_nodes_desc != 0])/484
231+231
length(mgm_nodes_desc[mgm_nodes_desc != 0])/462
length(mgm_nodes_desc[mgm_nodes_desc != 0])/462
22*21/2
22*22
(sum(cond0_desc_s == 1)/2)
(sum(cond0_desc_s == -1)/2)
105+46
231/151
151/231
(length(cond0_desc[cond0_desc != 0])/484)
(sum(cond0_desc_s == -1)/2)
(sum(cond0_desc_s == 1)/2)
cond3_desc_s = na.omit(as.vector(cond3$pairwise$signs))
(sum(cond3_desc_s == -1)/2)
(sum(cond3_desc_s == 1)/2)
cond7_desc_s = na.omit(as.vector(cond7$pairwise$signs))
(sum(cond7_desc_s == -1)/2)
(sum(cond7_desc_s == 1)/2)
cond10_desc_s = na.omit(as.vector(cond10$pairwise$signs))
(sum(cond10_desc_s == -1)/2)
(sum(cond10_desc_s == 1)/2)
(length(cond0_desc[cond0_desc != 0])/484)
(length(cond3_desc[cond3_desc != 0])/484)
(length(cond7_desc[cond7_desc != 0])/484)
mgm_issp_2019_nodes$pairwise$wadj
(length(cond0_desc[cond0_desc != 0])/484)
(length(cond7_desc[cond7_desc != 0])/484)
(length(cond3_desc[cond3_desc != 0])/484)
(length(cond0_desc[cond0_desc != 0])/484)
cond10_desc = cond0$pairwise$wadj[-23, ]
cond10_desc = cond10_desc[, -23]
cond10_desc = as.vector(cond10_desc)
(length(cond10_desc[cond10_desc != 0])/484)
cond0_desc = cond0$pairwise$wadj[-23, ]
cond0_desc = cond0_desc[, -23]
cond0_desc = as.vector(cond0_desc)
(length(cond0_desc[cond0_desc != 0])/484)
cond0_desc
cond0_desc = as.vector(cond0_desc[cond0_desc != 0])
cond0_desc
cond0_desc = mean(cond0_desc)
cond0_desc
cond0_desc = cond0$pairwise$wadj[-23, ]
cond0_desc = cond0_desc[, -23]
cond0_desc = as.vector(cond0_desc[cond0_desc != 0])
(cond0_desc = mean(cond0_desc))
cond3_desc = cond3$pairwise$wadj[-23, ]
cond3_desc = cond3_desc[, -23]
cond3_desc = as.vector(cond3_desc[cond3_desc != 0])
(cond3_desc = mean(cond3_desc))
cond7_desc = cond7$pairwise$wadj[-23, ]
cond7_desc = cond7_desc[, -23]
cond7_desc = as.vector(cond7_desc[cond7_desc != 0])
(cond7_desc = mean(cond7_desc))
cond10_desc = cond10$pairwise$wadj[-23, ]
cond10_desc = cond10_desc[, -23]
cond10_desc = as.vector(cond10_desc[cond10_desc != 0])
(cond10_desc = mean(cond10_desc))
(sum(cond0_desc_s == -1)/2)
(sum(cond3_desc_s == -1)/2)
(sum(cond7_desc_s == -1)/2)
(sum(cond10_desc_s == -1)/2)
#descriptives
CANFit$weiadj
#descriptives
can_desc = as.vector(CANFit$weiadj)
22*21
22*22
mgm_nodes_desc = as.vector(mgm_issp_2019_nodes$pairwise$wadj)
length(mgm_nodes_desc[mgm_nodes_desc != 0])/462
#load object instead
load(here("Input", "bootstrap", "is_boot.RData"))
saummary_edgeacc_is = summary(edgeacc_is, statistics = c("edge"),
perNode = FALSE, rank = FALSE)
saummary_edgstr_is = summary(edgeacc_is, statistics = c("strength"),
perNode = FALSE, rank = FALSE)
summary_edg_is = saummary_edgeacc_is %>%
arrange(mean)
summary_edg_is
summary_edgeacc_order <- saummary_edgeacc %>%
arrange(mean)
summary_edgeacc_order
#CS-coefficient (result should be above 0.25, better if above 0.5)
corStability_is = corStability(centstab_is)
corStability_is
corStability_is
#CS-coefficient (result should be above 0.25, better if above 0.5)
corStability_is = corStability(centstab_is)
saummary_edgstr_is
summary_cent_is = saummary_edgstr_is %>%
arrange(mean)
summary_cent_is
shortnames_22
shortnames_23
shortnames_23
test_strrr_is = differenceTest(edgeacc_is, 1, 14, "strength")
test_strrr_is
test_strrr_is = differenceTest(edgeacc_is, 1, 17, "strength")
test_strrr_is
test_strrr_is = differenceTest(edgeacc_is, 1, 3, "strength")
test_strrr_is
#descriptives
summary_cent_is = saummary_edgstr_is %>%
arrange(mean)
summary_cent_is
test_strrr_is = differenceTest(edgeacc_is, 1, 7, "strength")
test_strrr_is
test_strrr_is = differenceTest(edgeacc_is, 17, 14, "strength")
test_strrr_is
test_strrr_is = differenceTest(edgeacc_is, 17, 7, "strength")
test_strrr_is
(small_w_is = NetworkToolbox::smallworldness(CANFit$weiadj, iter = 1000,
progBar = FALSE, method = c("TJHBL")))
shortnames_23
test_strrr_is = differenceTest(edgeacc_is, 17, 3, "strength")
test_strrr_is
test_strrr_is = differenceTest(edgeacc_is, 17, 2, "strength")
test_strrr_is
test_strrr_is = differenceTest(edgeacc_is, 17, 12, "strength")
test_strrr_is
confi
#descriptives
confi_des = confi %>%
arrange(m)
confi_des
#descriptives
confi_des = confi %>%
arrange(m) %>%
round(3)
#descriptives
confi_des = confi %>%
arrange(m) %>%
round(,3)
#descriptives
confi_des = confi %>%
arrange(m) %>%
round(3)
#descriptives
confi_des = confi %>%
arrange(m)
confi_des
