everything())
#Missing values and inverting polarity
issp_2019 = issp_2019 %>%
mutate(across(ineq_p:anger, ~replace(., .<0 , NA)),
across(family:sex,  ~ 6 - .),
across(c(ineq_p, redis_p, redis_m, redis_d, prog_b),  ~ 6 - .),
across(resp:merit,  ~ 6 - .))
#Reorder and na.omit
issp_2019 = issp_2019 %>%
select(ineq_p,
reg_p,
prog_b,
ineq_j,
redis_d,
redis_f,
family,
edupar,
edu,
work,
people,
connec,
bribes,
race,
relig,
sex,
redis_p,
redis_m,
resp,
train,
need,
merit,
anger,
everything())%>%
na.omit()
#issp_2019_nodes
issp_2019_nodes = issp_2019 %>%
select(ineq_p:merit)
#issp_2019_anger
issp_2019_anger = issp_2019 %>%
select(ineq_p:anger)
#issp_2019_can
#map(issp_2019_nodes, frq)
issp_2019_can = issp_2019_nodes %>% #truncation at means
mutate(ineq_p= ifelse(ineq_p<=4,0,1),
reg_p= ifelse(reg_p<=3,0,1),
prog_b= ifelse(prog_b<=4,0,1),
ineq_j= ifelse(ineq_j<=2,0,1),
redis_d= ifelse(redis_d<=4,0,1),
redis_f= ifelse(redis_f<=3,0,1),
family= ifelse(family<=2,0,1),
edupar= ifelse(edupar<=3,0,1),
edu= ifelse(edu<=4,0,1),
work= ifelse(work<=4,0,1),
people= ifelse(people<=3,0,1),
connec= ifelse(connec<=2,0,1),
bribes= ifelse(bribes<=1,0,1),
race= ifelse(race<=2,0,1),
relig= ifelse(relig<=1,0,1),
sex= ifelse(sex<=2,0,1),
redis_p= ifelse(redis_p<=3,0,1),
redis_m= ifelse(redis_m<=3,0,1),
resp= ifelse(resp<=4,0,1),
train= ifelse(train<=3,0,1),
need= ifelse(need<=2,0,1),
merit= ifelse(merit<=4,0,1))
#issp_2019_nodes
summary_issp_2019_nodes  = issp_2019_nodes %>%
skim() %>%
as.data.frame()
stargazer(as.data.frame(issp_2019_nodes), type = "text", nobs = TRUE)
#issp_2019_anger
summary_issp_2019_anger  = issp_2019_anger %>%
skim() %>%
as.data.frame()
stargazer(as.data.frame(issp_2019_anger), type = "text", nobs = TRUE)
#issp_2019_can
summary_issp_2019_can  = issp_2019_can %>%
skim() %>%
as.data.frame()
stargazer(as.data.frame(issp_2019_can), type = "text", nobs = TRUE)
#Save objects
save(issp_2019_nodes, issp_2019_anger, issp_2019_can,
file = here("Input", "ita_data.RData"))
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr,
stargazer, IsingFit, qgraph, Matrix, igraph, NetworkComparisonTest, bootnet,
rio, IsingSampler, compute.es, foreign, mgm, matrixcalc, openxlsx, Rcpp,
forestplot, ggplot2, compute.es, jtools, glue, EGAnet, signnet)
#Import dataset
load(here("Input", "ita_data.RData"))
shortnames_22 = names(issp_2019_nodes)
shortnames_23 = names(issp_2019_anger)
longnames_22 <- c("Perception of large income inequality (ineq_p)",
"Perception of tax regressivity (reg_p)",
"Belief in progressive taxation (prog_b)",
"Judgment of unfair distribution (ineq_j)",
"Judgment of political disinterest in redistribution (redis_d)",
"Judgment of failure of public redistribution (redis_f)",
"Importance of wealthy family (family)",
"Importance of parental education (edupar)",
"Importance of education (edu)",
"Importance of hard work (work)",
"Importance of knowing right people (people)",
"Importance of political connections (connec)",
"Importance of giving bribes (bribes)",
"Importance of race (race)",
"Importance of religion (relig)",
"Importance of sex (sex)",
"Belief in public redistribution (redis_p)",
"Belief in market redistribution (redis_m)",
"Pay criteria: Responsibility (resp)",
"Pay criteria: Training (train)",
"Pay criteria: Need (need)",
"Pay criteria: Merit (merit)")
legendnames_22 <- c("Perception of large income inequality",
"Perception of tax regressivity",
"Belief in progressive taxation",
"Judgment of unfair distribution",
"Judgment of political disinterest in redistribution",
"Judgment of failure of public redistribution",
"Importance of wealthy family",
"Importance of parental education",
"Importance of education",
"Importance of hard work",
"Importance of knowing right people",
"Importance of political connections",
"Importance of giving bribes",
"Importance of race",
"Importance of religion",
"Importance of sex",
"Belief in public redistribution",
"Belief in market redistribution",
"Pay criteria: Responsibility",
"Pay criteria: Training",
"Pay criteria: Need",
"Pay criteria: Merit")
#colors
ggm_groups = list(
"Perceptions"=c(1,2,7:16),
"Beliefs"=c(3,17:22),
"Judgments"=c(4:6))
ggm_colors <- c("#FBB4AE","#CCEBC5", "#A6D9E0")
#remove haven labels
issp_2019_nodes = sapply(issp_2019_nodes, haven::zap_labels)
issp_2019_can = sapply(issp_2019_can, haven::zap_labels)
issp_2019_anger = sapply(issp_2019_anger, haven::zap_labels)
#fit mgm
mgm_issp_2019_nodes = mgm(issp_2019_nodes, type = rep("g",22),
level = rep(1, 22), lambdaSel = "EBIC", ruleReg = "OR")
#predictability
pred_obj <- predict(object = mgm_issp_2019_nodes,
data = issp_2019_nodes,
errorCon = 'R2')
#plot
set.seed(100)
GraphMGM<-qgraph(mgm_issp_2019_nodes$pairwise$wadj, layout = 'spring',
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
legend=T, legend.cex = 0.33,
edge.color=mgm_issp_2019_nodes$pairwise$edgecolor_cb,
borders = T, vsize=7.0, esize = 15, GLratio = 2,
pie = pred_obj$errors[,2], pieColor = rep('#377EB8',22),
filetype="jpg", filename=here("Output", "Fig_1"))
# ITA_small_core = qgraph::smallworldness(CANFit$weiadj, B = 1000)
(small_w = NetworkToolbox::smallworldness(mgm_issp_2019_nodes$pairwise$wadj, iter = 1000,
progBar = FALSE, method = c("HG")))
#ASPL
NetworkToolbox::pathlengths(mgm_issp_2019_nodes$pairwise$wadj, weighted = FALSE)
#Clustering
NetworkToolbox::transitivity(mgm_issp_2019_nodes$pairwise$wadj, weighted = FALSE)
#centrality
centrality_mgm_graph = centralityPlot(GraphMGM, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_2.jpg"), centrality_mgm_graph,
height = 4)
#Fit moderated ggm
mgm_mod <- mgm(data = issp_2019_anger,
type = rep("g", 23),
level = rep(1, 23),
lambdaSel = "CV",
ruleReg = "OR",
moderators = 23,
threshold = "none",
pbar = FALSE)
#Inspect interaction parameters [comments are wrong:readapt]
mgm_mod$interactions$indicator
#45 pairwise interactions
#27 3-way interactions (moderation)
#acces a pairwise interaction between variables 1 (p_ineq) and 3 (p_tax) can be obtained like this:
showInteraction(object = mgm_mod, int = c(1,3))
#interpretation like in reg: when increasing p_ineq (p_tax) by 1 unit, p_tax (p_ineq) increases by
# 0.019, keeping everything else constant
#access a 3-way interaction
showInteraction(object = mgm_mod, int = c(1,3,11))
#interpretation: positive moderation effect. If one increases the values of anger, the pairwise interaction between p_ineq and p_tax becomes stronger.
#we have to correct our above interpretation of the pairwise interaction between p_ineq and p_tax: when increasing p_ineq (p_tax) by 1 unit, p_tax (p_ineq) increases by â‰ˆ0.019, if anger is equal to zero and when keeping everything else constant.
#access scale of anger (every variable is mean-centered and sd=1)
tb <- table(scale(issp_2019_anger[,23]))
names(tb) <- round(as.numeric(names(tb)), 2)
barplot(tb, axes=FALSE, xlab="", ylim=c(0, 250))
axis(2, las=2, c(0, 50, 100, 150, 200, 250))
#conditioning on the moderator, interesting values are 0, 3, 7, 10 of v 11 (anger)
cond0 <- condition(object = mgm_mod,
values = list('23' = 0))
cond3 <- condition(object = mgm_mod,
values = list('23' = 3))
cond7 <- condition(object = mgm_mod,
values = list('23' = 7))
cond10 <- condition(object = mgm_mod,
values = list('23' = 10))
#these are now 3 different pairwise models, in which anger is fixed at 3 diff values
#plot with 3 levels and fixed layout
Graph_cond_0 = qgraph(cond0$pairwise$wadj)
Graph_cond_3 = qgraph(cond3$pairwise$wadj)
Graph_cond_7 = qgraph(cond7$pairwise$wadj)
Graph_cond_10 = qgraph(cond10$pairwise$wadj)
#multiplot
jpeg(here("Output", "Fig_3.jpg"),
height = 3000, width = 4000, quality = 1000)
L<-averageLayout(Graph_cond_0,Graph_cond_3, Graph_cond_7, Graph_cond_10, layout = "spring")
lmat <- matrix(1:4, 2)
lo <- layout(lmat, width = c(1, 1))
set.seed(1)
Graph_cond_0 = qgraph(cond0$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 0", title.cex = 6,
edge.color=cond0$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_3 = qgraph(cond3$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 6,
edge.color=cond3$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_7 = qgraph(cond7$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 6,
edge.color=cond7$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
set.seed(1)
Graph_cond_10 = qgraph(cond10$pairwise$wadj, layout = L,
labels = colnames(issp_2019_anger),
groups = ggm_groups, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 6,
edge.color=cond10$pairwise$edgecolor_cb,
borders = T, vsize=10, esize = 15)
dev.off()
#fit
CANFit <- IsingFit(issp_2019_can, gamma = 0.05)
#plot
CANGraph<-qgraph(CANFit$weiadj, layout = averageLayout(GraphMGM),
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
legend=F, theme = "Borkulo",
borders = T, vsize=7.0, esize = 15,
filetype="jpg", filename=here("Output", "Fig_4.1"))
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2.5,2.8)) +
theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4)
#combined centrality tables
centrality_combined = centralityPlot(list(GGM=GraphMGM,Ising=CANGraph), include = c("Strength"),
scale = "z-scores", orderBy = "Strength") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2,2.8)) +
theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig2_4.2_combined.jpg"), centrality_combined,
height = 4)
#Simulation input
SimInput <- LinTransform(CANFit$weiadj, CANFit$thresholds) #The LinTransform function rescales the edge weights and thresholds, so that a threshold of 0 indicates that a node has no disposition to be in a given state and a positive (negative) threshold indicates that a node has the disposition to be "on" ("off")
#create objects
shortnames_1 = shortnames_22[1]
shortnames_2 = shortnames_22[2]
shortnames_3 = shortnames_22[3]
shortnames_4 = shortnames_22[4]
shortnames_5 = shortnames_22[5]
shortnames_6 = shortnames_22[6]
shortnames_7 = shortnames_22[7]
shortnames_8 = shortnames_22[8]
shortnames_9 = shortnames_22[9]
shortnames_10 = shortnames_22[10]
shortnames_11 = shortnames_22[11]
shortnames_12 = shortnames_22[12]
shortnames_13 = shortnames_22[13]
shortnames_14 = shortnames_22[14]
shortnames_15 = shortnames_22[15]
shortnames_16 = shortnames_22[16]
shortnames_17 = shortnames_22[17]
shortnames_18 = shortnames_22[18]
shortnames_19 = shortnames_22[19]
shortnames_20 = shortnames_22[20]
shortnames_21 = shortnames_22[21]
shortnames_22 = shortnames_22[22]
#samples with single nodes positive disposition
set.seed(123)
SampleNeg <- IsingSampler(3000, SimInput$graph,
rep(-.1,22),#this argument specifies the thresholds, which are all set to -.1
responses = c(-1L,1L))
Sample_1 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,0),
1,#this sets the thesholds of the first node to 1
rep(-.1,21)),#this sets the threshold of the others node to -.1
responses = c(-1L,1L))
Sample_2 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,1),#this sets the threshold of the first node to -.1
1,#this sets the thesholds of the second node to 1
rep(-.1,20)),#this sets the threshold of the others node to -.1
responses = c(-1L,1L))
Sample_3 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,2),
1,
rep(-.1,19)),
responses = c(-1L,1L))
Sample_4 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,3),
1,
rep(-.1,18)),
responses = c(-1L,1L))
Sample_5 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,4),
1,
rep(-.1,17)),
responses = c(-1L,1L))
Sample_6 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,5),
1,
rep(-.1,16)),
responses = c(-1L,1L))
Sample_7 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,6),
1,
rep(-.1,15)),
responses = c(-1L,1L))
Sample_8 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,7),
1,
rep(-.1,14)),
responses = c(-1L,1L))
Sample_9 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,8),
1,
rep(-.1,13)),
responses = c(-1L,1L))
Sample_10 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,9),
1,
rep(-.1,12)),
responses = c(-1L,1L))
Sample_11 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,10),
1,
rep(-.1,11)),
responses = c(-1L,1L))
Sample_12 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,11),
1,
rep(-.1,10)),
responses = c(-1L,1L))
Sample_13 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,12),
1,
rep(-.1,9)),
responses = c(-1L,1L))
Sample_14 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,13),
1,
rep(-.1,8)),
responses = c(-1L,1L))
Sample_15 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,14),
1,
rep(-.1,7)),
responses = c(-1L,1L))
Sample_16 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,15),
1,
rep(-.1,6)),
responses = c(-1L,1L))
Sample_17 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,16),
1,
rep(-.1,5)),
responses = c(-1L,1L))
Sample_18 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,17),
1,
rep(-.1,4)),
responses = c(-1L,1L))
Sample_19 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,18),
1,
rep(-.1,3)),
responses = c(-1L,1L))
Sample_20 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,19),
1,
rep(-.1,2)),
responses = c(-1L,1L))
Sample_21 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,20),
1,
rep(-.1,1)),
responses = c(-1L,1L))
Sample_22 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,21),
1,
rep(-.1,0)),
responses = c(-1L,1L))
allsamples <- rbind(SampleNeg,
Sample_1,
Sample_2,
Sample_3,
Sample_4,
Sample_5,
Sample_6,
Sample_7,
Sample_8,
Sample_9,
Sample_10,
Sample_11,
Sample_12,
Sample_13,
Sample_14,
Sample_15,
Sample_16,
Sample_17,
Sample_18,
Sample_19,
Sample_20,
Sample_21,
Sample_22)
rowname <- rep(c('Baseline',
glue('Intervention on {shortnames_1}'),
glue('Intervention on {shortnames_2}'),
glue('Intervention on {shortnames_3}'),
glue('Intervention on {shortnames_4}'),
glue('Intervention on {shortnames_5}'),
glue('Intervention on {shortnames_6}'),
glue('Intervention on {shortnames_7}'),
glue('Intervention on {shortnames_8}'),
glue('Intervention on {shortnames_9}'),
glue('Intervention on {shortnames_10}'),
glue('Intervention on {shortnames_11}'),
glue('Intervention on {shortnames_12}'),
glue('Intervention on {shortnames_13}'),
glue('Intervention on {shortnames_14}'),
glue('Intervention on {shortnames_15}'),
glue('Intervention on {shortnames_16}'),
glue('Intervention on {shortnames_17}'),
glue('Intervention on {shortnames_18}'),
glue('Intervention on {shortnames_19}'),
glue('Intervention on {shortnames_20}'),
glue('Intervention on {shortnames_21}'),
glue('Intervention on {shortnames_22}')),
each=3000)
row.names(allsamples) <- rowname
#calculate the sum scores of the different networks
sumSampleall<-apply(allsamples, 1, sum)
sumscores<- data.frame(sumSampleall,rowname)
head (sumscores)
meansumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), mean)
sdsumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), sd)
graphicsumscores<- data.frame(meansumscores,sdsumscores)
#calculate confidence intervals for sumscore means
m<-graphicsumscores$x
s<-graphicsumscores$x.1
u<-m+1.96*s/sqrt(3000)
l<-m-1.96*s/sqrt(3000)
confi<- cbind(graphicsumscores, m, u, l)
names<-confi$Group.1
graph<-data.frame(confi,names)
graph$names <- factor(graph$names, levels = graph$names[order(graph$m)])
graph$names
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
theme_nice()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
