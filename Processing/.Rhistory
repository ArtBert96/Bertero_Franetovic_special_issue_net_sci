rep(-.1,13)),
responses = c(-1L,1L))
Sample_10 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,9),
1,
rep(-.1,12)),
responses = c(-1L,1L))
Sample_11 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,10),
1,
rep(-.1,11)),
responses = c(-1L,1L))
Sample_12 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,11),
1,
rep(-.1,10)),
responses = c(-1L,1L))
Sample_13 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,12),
1,
rep(-.1,9)),
responses = c(-1L,1L))
Sample_14 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,13),
1,
rep(-.1,8)),
responses = c(-1L,1L))
Sample_15 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,14),
1,
rep(-.1,7)),
responses = c(-1L,1L))
Sample_16 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,15),
1,
rep(-.1,6)),
responses = c(-1L,1L))
Sample_17 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,16),
1,
rep(-.1,5)),
responses = c(-1L,1L))
Sample_18 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,17),
1,
rep(-.1,4)),
responses = c(-1L,1L))
Sample_19 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,18),
1,
rep(-.1,3)),
responses = c(-1L,1L))
Sample_20 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,19),
1,
rep(-.1,2)),
responses = c(-1L,1L))
Sample_21 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,20),
1,
rep(-.1,1)),
responses = c(-1L,1L))
Sample_22 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,21),
1,
rep(-.1,0)),
responses = c(-1L,1L))
allsamples <- rbind(SampleNeg,
Sample_1,
Sample_2,
Sample_3,
Sample_4,
Sample_5,
Sample_6,
Sample_7,
Sample_8,
Sample_9,
Sample_10,
Sample_11,
Sample_12,
Sample_13,
Sample_14,
Sample_15,
Sample_16,
Sample_17,
Sample_18,
Sample_19,
Sample_20,
Sample_21,
Sample_22)
rowname <- rep(c('Baseline',
glue('Intervention on {shortnames_1}'),
glue('Intervention on {shortnames_2}'),
glue('Intervention on {shortnames_3}'),
glue('Intervention on {shortnames_4}'),
glue('Intervention on {shortnames_5}'),
glue('Intervention on {shortnames_6}'),
glue('Intervention on {shortnames_7}'),
glue('Intervention on {shortnames_8}'),
glue('Intervention on {shortnames_9}'),
glue('Intervention on {shortnames_10}'),
glue('Intervention on {shortnames_11}'),
glue('Intervention on {shortnames_12}'),
glue('Intervention on {shortnames_13}'),
glue('Intervention on {shortnames_14}'),
glue('Intervention on {shortnames_15}'),
glue('Intervention on {shortnames_16}'),
glue('Intervention on {shortnames_17}'),
glue('Intervention on {shortnames_18}'),
glue('Intervention on {shortnames_19}'),
glue('Intervention on {shortnames_20}'),
glue('Intervention on {shortnames_21}'),
glue('Intervention on {shortnames_22}')),
each=3000)
row.names(allsamples) <- rowname
#calculate the sum scores of the different networks
sumSampleall<-apply(allsamples, 1, sum)
sumscores<- data.frame(sumSampleall,rowname)
head (sumscores)
meansumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), mean)
sdsumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), sd)
graphicsumscores<- data.frame(meansumscores,sdsumscores)
#calculate confidence intervals for sumscore means
m<-graphicsumscores$x
s<-graphicsumscores$x.1
u<-m+1.96*s/sqrt(3000)
l<-m-1.96*s/sqrt(3000)
confi<- cbind(graphicsumscores, m, u, l)
names<-confi$Group.1
graph<-data.frame(confi,names)
graph$names <- factor(graph$names, levels = graph$names[order(graph$m)])
graph$names
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Change in mean sum scores')+
theme_minimal()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
#load the object instead:
load(here("Input", "bootnet", "ggm_boot.RData"))
#load the object instead:
load(here("Input", "bootstrap", "ggm_boot.RData"))
#plot
edgeacc_ggm = plot(edgeacc, labels = shortnames_22, order="sample")
ggsave(here("Output", "Supplement", "Fig_2.jpg"), edgeacc_ggm, height = 22, width = 15)
centstab_ggm = plot(centstab, "Strength", labels = shortnames_22)
ggsave(here("Output", "Supplement", "Fig_3.jpg"), centstab_ggm, height = 22, width = 15)
#CS-coefficient (result should be above 0.25, better if above 0.5)
corStability_ggm = corStability(centstab)
#load object instead
load(here("Input", "bootstrap", "mod_boot.RData"))
stab_mod = plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
labels = colnames(issp_2019_anger),
layout.width.labels = .40)
ggsave(here("Output", "Supplement", "Fig_4.jpg"), stab_mod)
res_obj <- resample(object = mgm_mod,
data = issp_2019_anger,
nB = 100,
pbar = TRUE)
stab_mod = plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
labels = colnames(issp_2019_anger),
layout.width.labels = .40)
ggsave(here("Output", "Supplement", "Fig_4.jpg"), stab_mod)
ggsave(here("Output", "Supplement", "Fig_4.jpg"), stab_mod)
stab_mod
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
labels = colnames(issp_2019_anger),
layout.width.labels = .40)
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
labels = colnames(issp_2019_anger),
layout.width.labels = .20)
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 0.5,
labels = colnames(issp_2019_anger),
layout.width.labels = .10)
jpeg(here("Output", "Supplement", "Fig_4.jpg"), width = 1600, height = 1600)  # You can adjust width and height as needed
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 0.5,
labels = colnames(issp_2019_anger),
layout.width.labels = .10)
dev.off()
png(here("Output", "Supplement", "Fig_4.png"), width = 1600, height = 1600)  # You can adjust width and height as needed
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 0.5,
labels = colnames(issp_2019_anger),
layout.width.labels = .10)
dev.off()
png(here("Output", "Supplement", "Fig_4.png"), width = 1600, height = 1600)  # You can adjust width and height as needed
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 0.8,
labels = colnames(issp_2019_anger),
layout.width.labels = .30)
dev.off()
png(here("Output", "Supplement", "Fig_4.png"), width = 3000, height = 3000)  # You can adjust width and height as needed
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 0.8,
labels = colnames(issp_2019_anger),
layout.width.labels = .30)
dev.off()
png(here("Output", "Supplement", "Fig_4.1.png"), width = 3000, height = 3000)  # You can adjust width and height as needed
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 0.8,
decreasing = TRUE,
cut = 1:30,
labels = colnames(issp_2019_anger),
layout.width.labels = .30)
dev.off()
png(here("Output", "Supplement", "Fig_4.1.png"), width = 3000, height = 3000)  # You can adjust width and height as needed
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
decreasing = TRUE,
cut = 1:30,
labels = colnames(issp_2019_anger),
layout.width.labels = 1)
dev.off()
png(here("Output", "Supplement", "Fig_4.1.png"), width = 3000, height = 3000)  # You can adjust width and height as needed
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
decreasing = TRUE,
labels = colnames(issp_2019_anger),
layout.width.labels = 1,
table = TRUE)
dev.off()
tab_mod = plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
decreasing = TRUE,
labels = colnames(issp_2019_anger),
layout.width.labels = 1,
table = TRUE)
head(tab_mod)
nrow(tab_mod)
head(tab_mod)
names(issp_2019_anger)
colnames(issp_2019_anger)
colnames(tab_mod)
table(tab_mod$Variable A)
table(tab_mod[,1])
for (i in 1:nrow(tab_mod)) {
numeric_value <- tab_mod[i, "Variable A"]
if (numeric_value >= 1 && numeric_value <= length(names_tab_mod)) {
tab_mod[i, "Variable A"] <- names_tab_mod[numeric_value]
}
}
#build a nice table
names_tab_mod = names(issp_2019_anger)
for (i in 1:nrow(tab_mod)) {
numeric_value <- tab_mod[i, "Variable A"]
if (numeric_value >= 1 && numeric_value <= length(names_tab_mod)) {
tab_mod[i, "Variable A"] <- names_tab_mod[numeric_value]
}
}
head(tab_mod)
tab_mod
tab_mod = data.frame(plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
decreasing = TRUE,
labels = colnames(issp_2019_anger),
layout.width.labels = 1,
table = TRUE))
View(tab_mod)
prova=head(tab_mod)
tab_mod_prova = tab_mod %>%
mutate("Variable.A" = names_tab_mod[as.numeric(Variable.A)])
tab_mod_prova
prova
tab_mod_prova = tab_mod %>%
mutate(Variable.A = names_tab_mod[as.numeric(Variable.A)])
tab_mod_prova
prova
#Stability of moderations
res_obj <- resample(object = mgm_mod,
data = issp_2019_anger,
nB = 500,
pbar = TRUE)
edgeacc_is_plot = plot(edgeacc_is, labels = shortnames_22, order="sample")
#load object instead
load(here("Input", "bootnet", "is_boot.RData"))
#load object instead
load(here("Input", "bootnet", "is_boot.RData"))
#load object instead
load(here("Input", "bootnet", "is_boot.RData"))
save(edgeacc, centstab,
file = here("Input", "bootstrap", "ggm_boot.RData"))
save(res_obj,
file = here("Input", "bootstrap", "mod_boot.RData"))
save(edgeacc_is, centstab_is,
file = here("Input", "bootstrap", "is_boot.RData"))
knitr::opts_chunk$set(echo = TRUE)
#load the object instead:
load(here("Input", "bootstrap", "ggm_boot.RData"))
#libraries
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr,
stargazer, IsingFit, qgraph, Matrix, igraph, NetworkComparisonTest, bootnet,
rio, IsingSampler, compute.es, foreign, mgm, matrixcalc, openxlsx, Rcpp,
forestplot, ggplot2, compute.es, jtools, glue, EGAnet, signnet)
#load the object instead:
load(here("Input", "bootstrap", "ggm_boot.RData"))
#load object instead
load(here("Input", "bootnet", "is_boot.RData"))
#load object instead
load(here("Input", "bootstrap", "is_boot.RData"))
edgeacc_is_plot = plot(edgeacc_is, labels = shortnames_22, order="sample")
#Import dataset
load(here("Input", "usa_data.RData"))
shortnames_22 = names(issp_2019_nodes)
#plot
edgeacc_is_plot = plot(edgeacc_is, labels = shortnames_22, order="sample")
ggsave(here("Output", "Supplement", "Fig_4.jpg"), edgeacc_is_plot, height = 22, width = 15)
#plot
centstab_is_plot = plot(centstab, "Strength", labels = shortnames_22)
ggsave(here("Output", "Supplement", "Fig_5.jpg"), centstab_is_plot, height = 22, width = 15)
#load object instead
load(here("Input", "bootstrap", "mod_boot.RData"))
tab_mod = data.frame(plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
decreasing = TRUE,
labels = colnames(issp_2019_anger),
layout.width.labels = 1,
table = TRUE))
head(tab_mod)
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ)
head(tab_mod_prova)
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
arrange(Mod_Mean)
head(tab_mod_prova)
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
arrange(Mod_Mean, decreasing = T)
head(tab_mod_prova)
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
arrange(Mod_Mean, decreasing = F)
head(tab_mod_prova)
tab_mod_prova
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_Mean>0)
tab_mod_prova
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.60)
tab_mod_prova
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.70)
nrow(tab_mod_prova)
head(tab_mod_prova)
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.70) %>%
arrange(Mod_Mean, decreasing = T)
head(tab_mod_prova)
tab_mod_prova
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.70) %>%
arrange(Mod_Mean, decreasing = F)
tab_mod_prova
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.70) %>%
arrange(Mod_Mean, decreasing = F)
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.70) %>%
arrange(Mod_Mean, decreasing = T)
tab_mod_prova
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.70) %>%
arrange(desc(Mod_Mean))
tab_mod_prova
#build a nice table
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.80) %>%
arrange(desc(Mod_Mean))
tab_mod_prova
tab_mod_prova
# Create the names_tab_mod vector
names_tab_mod <- colnames(issp_2019_anger)
names_tab_mod
for (i in 1:nrow(tab_mod_prova)) {
numeric_value <- tab_mod_prova$Variable.A[i]
if (numeric_value >= 1 && numeric_value <= length(names_tab_mod)) {
tab_mod_prova$Variable.A[i] <- names_tab_mod[numeric_value]
}
}
tab_mod_prova
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.80) %>% #filtering moderation effect detected in more than 80% of bootstrap samples
arrange(desc(Mod_Mean))
tab_mod_prova$Variable.A[i]
for (i in 1:nrow(tab_mod_prova)) {
numeric_value <- tab_mod_prova$Variable.A[i]
if (numeric_value >= 1 && numeric_value <= length(names_tab_mod)) {
tab_mod_prova$Variable.A[i] <- names_tab_mod[numeric_value]
}
}
tab_mod_prova
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.80) %>% #filtering moderation effect detected in more than 80% of bootstrap samples
arrange(desc(Mod_Mean))
tab_mod_prova
tab_mod_prova$Variable.A <- ifelse(tab_mod_prova$Variable.A >= 1 & tab_mod_prova$Variable.A <= length(names_tab_mod), names_tab_mod[tab_mod_prova$Variable.A], tab_mod_prova$Variable.A)
tab_mod_prova
tab_mod_prova = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.80) %>% #filtering moderation effect detected in more than 80% of bootstrap samples
arrange(desc(Mod_Mean))
tab_mod_prova
colnames(issp_2019_anger)
tab_mod_prova$Variable.A <- ifelse(tab_mod_prova$Variable.A >= 1
& tab_mod_prova$Variable.A <= length(names_tab_mod),
names_tab_mod[tab_mod_prova$Variable.A],
tab_mod_prova$Variable.A)
tab_mod_prova
tab_mod_prova$Variable.B <- ifelse(tab_mod_prova$Variable.B >= 1
& tab_mod_prova$Variable.B <= length(names_tab_mod),
names_tab_mod[tab_mod_prova$Variable.B],
tab_mod_prova$Variable.B)
tab_mod_prova
tab_mod_df = tab_mod %>%
select(Variable.A, Variable.B, Mod_Mean, Mod_qtl_low, Mod_qtl_high, Mod_propLtZ) %>%
filter(Mod_propLtZ>0.80) %>% #filtering moderation effect detected in more than 80% of bootstrap samples
arrange(desc(Mod_Mean))
# Create the names_tab_mod vector
names_tab_mod <- colnames(issp_2019_anger)
# Loop through the dataframe and replace numeric values with corresponding text
tab_mod_df$Variable.A <- ifelse(tab_mod_df$Variable.A >= 1
& tab_mod_df$Variable.A <= length(names_tab_mod),
names_tab_mod[tab_mod_df$Variable.A],
tab_mod_df$Variable.A)
tab_mod_df$Variable.B <- ifelse(tab_mod_df$Variable.B >= 1
& tab_mod_df$Variable.B <= length(names_tab_mod),
names_tab_mod[tab_mod_df$Variable.B],
tab_mod_df$Variable.B)
stargazer(tab_mod_df, type = "html", nobs = F)
write.csv(here("Output", "Supplement", "tab_mod_df.csv"), tab_mod_df, row.names = F)
write.csv(here("Output", "Supplement", "tab_mod_df.csv")tab_mod_df, row.names = F)
write.csv(tab_mod_df, here("Output", "Supplement", "tab_mod_df.csv"), row.names = F)
tab_mod_df
save(edgeacc, centstab,
file = here("Input", "bootstrap", "ggm_boot.RData"))
save(res_obj,
file = here("Input", "bootstrap", "mod_boot.RData"))
save(edgeacc_is, centstab_is,
file = here("Input", "bootstrap", "is_boot.RData"))
